
import os
from pathlib import Path
import shutil
from datetime import datetime

# Configurable root path
ROOT = Path.home() / "Documents" / "Sapien Intelligence"
DROPZONE = ROOT / "Dropzone"
LOG_DIR = ROOT / "Logs" / "Structure_Changes"
SYSTEM_MAP = ROOT / "SystemMeta" / "SYSTEM_MAP.txt"
VERSION_FILE = ROOT / "VERSION.txt"

# Create logs folder if it doesn't exist
LOG_DIR.mkdir(parents=True, exist_ok=True)

log_file = LOG_DIR / f"log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
log_entries = []

def log(entry):
    log_entries.append(entry)
    print(entry)

def write_log():
    with open(log_file, 'w') as f:
        f.write("\n".join(log_entries))

def create_folder(path):
    if not path.exists():
        path.mkdir(parents=True)
        log(f"[Created Folder] {path.relative_to(ROOT)}")

def create_file(path, content=""):
    if not path.exists():
        with open(path, 'w') as f:
            f.write(content)
        log(f"[Created File] {path.relative_to(ROOT)}")

def read_map():
    if not SYSTEM_MAP.exists():
        log("[ERROR] SYSTEM_MAP.txt not found.")
        return []
    with open(SYSTEM_MAP, 'r') as f:
        lines = [line.strip() for line in f if line.strip()]
    return lines

def apply_system_map():
    entries = read_map()
    for entry in entries:
        parts = entry.split("::")
        if len(parts) == 2:
            rel_path, file_type = parts
            full_path = ROOT / rel_path
            if file_type == "folder":
                create_folder(full_path)
            elif file_type == "file":
                create_folder(full_path.parent)
                create_file(full_path, f"=== {full_path.name.replace('.txt','')} ===\n\n[Autogenerated by BrainFrameOS v3.1]")
        else:
            log(f"[Ignored] Invalid SYSTEM_MAP entry: {entry}")

def route_dropzone():
    if not DROPZONE.exists():
        DROPZONE.mkdir()
        return
    for item in DROPZONE.iterdir():
        if item.is_file():
            dest = ROOT / "Unsorted" / item.name
            dest.parent.mkdir(parents=True, exist_ok=True)
            shutil.move(str(item), str(dest))
            log(f"[Routed] {item.name} → Unsorted/")

def update_version():
    now = datetime.now().isoformat()
    with open(VERSION_FILE, 'w') as f:
        f.write(f"BrainFrameOS v3.1 - Synced: {now}")
    log(f"[Updated] VERSION.txt → {now}")

def main():
    log("[Start] BrainFrameOS v3.1 Reflect Now")
    apply_system_map()
    route_dropzone()
    update_version()
    write_log()
    log("[Complete] System sync and reflect finished.")

if __name__ == "__main__":
    main()
